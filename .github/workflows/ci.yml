name: CI - Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.25.x'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Install dependencies
      run: go mod tidy
    
    - name: Run tests (internal packages only; CGO disabled)
      env:
        CGO_ENABLED: 0
      run: |
        # Avoid building GUI dependencies that require X11/GL on Linux runners
        go test -v ./internal/...
    
    - name: Run linter (internal only)
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        install-mode: goinstall
        args: --timeout=5m --out-format=colored-line-number ./internal/...

  build-check:
    name: Build Check (Windows)
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Install dependencies
      run: go mod tidy
    
    - name: Build
      run: |
        # Building on Windows runner, no need to set GOOS/GOARCH explicitly
        go build -o hadescrypt.exe .
    
    - name: Verify executable
      run: |
        if (Test-Path hadescrypt.exe) {
          Write-Host "Windows build successful"
          $size = (Get-Item hadescrypt.exe).Length
          Write-Host "Size: $size bytes"
        } else {
          Write-Error "Windows build failed"
          exit 1
        }

  # Security scan disabled per request
