name: Release Build

permissions:
  contents: write

on:
  push:
    paths:
      - "VERSION"
    branches:
      - main
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        check-latest: true
        cache: true

    - name: Get version
      shell: pwsh
      run: |
        $version = Get-Content -Path "VERSION" -Raw
        $version = $version.Trim()
        echo "VERSION=$version" >> $env:GITHUB_ENV

    - name: Install dependencies
      run: go mod tidy

    - name: Build for Windows
      run: |
        go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" -o dist/windows/HadesCrypt.exe .
      env:
        CGO_ENABLED: 1
        GOOS: windows
        GOARCH: amd64

    - name: Create Windows distribution package
      shell: pwsh
      run: |
        $packageName = "HadesCrypt-v${{ env.VERSION }}-Windows-x64"
        $packageDir = "dist/$packageName"
        
        # Create package directory
        New-Item -ItemType Directory -Force -Path $packageDir
        New-Item -ItemType Directory -Force -Path "$packageDir/docs"
        
        # Copy files
        Copy-Item "dist/windows/HadesCrypt.exe" "$packageDir/HadesCrypt.exe"
        Copy-Item "README.md" "$packageDir/docs/README.md" -ErrorAction SilentlyContinue
        Copy-Item "CHANGELOG.md" "$packageDir/docs/CHANGELOG.md" -ErrorAction SilentlyContinue
        Copy-Item "COMMENT_DETECTION.md" "$packageDir/docs/COMMENT_DETECTION.md" -ErrorAction SilentlyContinue
        Copy-Item "LICENSE" "$packageDir/docs/LICENSE" -ErrorAction SilentlyContinue
        Copy-Item "dist/windows/install.bat" "$packageDir/install.bat"
        Copy-Item "dist/windows/README.md" "$packageDir/docs/BUILD_INSTRUCTIONS.md"
        
        # Create quick start guide
        @"
# HadesCrypt v${{ env.VERSION }} - Quick Start Guide

## Installation
1. Extract all files to a folder
2. Run install.bat as Administrator (optional)
3. Or simply run HadesCrypt.exe directly

## Basic Usage
1. Launch HadesCrypt.exe
2. Drag and drop your file into the application
3. Enter a strong password
4. Click "Encrypt" to encrypt or "Decrypt" to decrypt

## Features
- Multiple encryption modes (AES-256, ChaCha20, Post-Quantum, GnuPG)
- Password strength meter and generator
- Comments and keyfiles support
- Drag and drop interface
- Progress tracking

## Support
For help and documentation, see the docs folder.

## Version: ${{ env.VERSION }}
Build Date: $(Get-Date -Format 'yyyy-MM-dd')

Lock your secrets, rule your data. 🔱
"@ | Out-File -FilePath "$packageDir/QUICK_START.txt" -Encoding UTF8
        
        # Generate file hash
        $hash = Get-FileHash "$packageDir/HadesCrypt.exe" -Algorithm SHA256
        echo "WINDOWS_HASH=$($hash.Hash)" >> $env:GITHUB_ENV
        
        # Create ZIP archive
        Compress-Archive -Path "$packageDir/*" -DestinationPath "$packageName.zip" -CompressionLevel Optimal
        
        echo "WINDOWS_PACKAGE=$packageName.zip" >> $env:GITHUB_ENV

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          HadesCrypt-v${{ env.VERSION }}-Windows-x64.zip
          dist/windows/HadesCrypt.exe
        if-no-files-found: error
        compression-level: 9

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        check-latest: true
        cache: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev
        go mod tidy

    - name: Get version
      run: |
        VERSION=$(cat VERSION | tr -d '\n\r')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build for Linux
      run: |
        mkdir -p dist/linux
        go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" -o dist/linux/HadesCrypt .
      env:
        CGO_ENABLED: 1
        GOOS: linux
        GOARCH: amd64

    - name: Create Linux distribution package
      run: |
        PACKAGE_NAME="HadesCrypt-v${{ env.VERSION }}-Linux-x64"
        PACKAGE_DIR="dist/$PACKAGE_NAME"
        
        # Create package directory
        mkdir -p "$PACKAGE_DIR/docs"
        
        # Copy files
        cp dist/linux/HadesCrypt "$PACKAGE_DIR/"
        cp README.md "$PACKAGE_DIR/docs/" 2>/dev/null || true
        cp CHANGELOG.md "$PACKAGE_DIR/docs/" 2>/dev/null || true
        cp COMMENT_DETECTION.md "$PACKAGE_DIR/docs/" 2>/dev/null || true
        cp LICENSE "$PACKAGE_DIR/docs/" 2>/dev/null || true
        
        # Make executable
        chmod +x "$PACKAGE_DIR/HadesCrypt"
        
        # Create install script
        cat > "$PACKAGE_DIR/install.sh" << 'EOF'
#!/bin/bash
# HadesCrypt Linux Installer

echo "Installing HadesCrypt..."

# Copy to /usr/local/bin
sudo cp HadesCrypt /usr/local/bin/hadescrypt
sudo chmod +x /usr/local/bin/hadescrypt

# Create desktop entry
mkdir -p ~/.local/share/applications
cat > ~/.local/share/applications/hadescrypt.desktop << 'DESKTOP'
[Desktop Entry]
Version=1.0
Type=Application
Name=HadesCrypt
Comment=Advanced File Encryption Tool
Exec=hadescrypt
Icon=application-x-executable
Terminal=false
Categories=Utility;Security;
DESKTOP

echo "HadesCrypt installed successfully!"
echo "You can now run 'hadescrypt' from terminal or find it in applications menu."
EOF
        chmod +x "$PACKAGE_DIR/install.sh"
        
        # Create quick start guide
        cat > "$PACKAGE_DIR/QUICK_START.txt" << EOF
# HadesCrypt v${{ env.VERSION }} - Quick Start Guide

## Installation
1. Extract all files: tar -xzf HadesCrypt-v${{ env.VERSION }}-Linux-x64.tar.gz
2. Run install.sh for system-wide installation (optional)
3. Or run ./HadesCrypt directly

## Basic Usage
1. Launch ./HadesCrypt
2. Drag and drop your file into the application
3. Enter a strong password
4. Click "Encrypt" to encrypt or "Decrypt" to decrypt

## Features
- Multiple encryption modes (AES-256, ChaCha20, Post-Quantum, GnuPG)
- Password strength meter and generator
- Comments and keyfiles support
- Drag and drop interface
- Progress tracking

## Version: ${{ env.VERSION }}
Build Date: $(date +%Y-%m-%d)

Lock your secrets, rule your data. 🔱
EOF
        
        # Generate file hash
        HASH=$(sha256sum "$PACKAGE_DIR/HadesCrypt" | cut -d ' ' -f1)
        echo "LINUX_HASH=$HASH" >> $GITHUB_ENV
        
        # Create tar.gz archive
        tar -czf "$PACKAGE_NAME.tar.gz" -C dist "$PACKAGE_NAME"
        
        echo "LINUX_PACKAGE=$PACKAGE_NAME.tar.gz" >> $GITHUB_ENV

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          HadesCrypt-v${{ env.VERSION }}-Linux-x64.tar.gz
          dist/linux/HadesCrypt
        if-no-files-found: error
        compression-level: 9

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        check-latest: true
        cache: true

    - name: Install dependencies
      run: go mod tidy

    - name: Get version
      run: |
        VERSION=$(cat VERSION | tr -d '\n\r')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build for macOS
      run: |
        mkdir -p dist/macos
        go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" -o dist/macos/HadesCrypt .
      env:
        CGO_ENABLED: 1
        GOOS: darwin
        GOARCH: amd64

    - name: Create macOS distribution package
      run: |
        PACKAGE_NAME="HadesCrypt-v${{ env.VERSION }}-macOS-x64"
        PACKAGE_DIR="dist/$PACKAGE_NAME"
        
        # Create package directory
        mkdir -p "$PACKAGE_DIR/docs"
        
        # Copy files
        cp dist/macos/HadesCrypt "$PACKAGE_DIR/"
        cp README.md "$PACKAGE_DIR/docs/" 2>/dev/null || true
        cp CHANGELOG.md "$PACKAGE_DIR/docs/" 2>/dev/null || true
        cp COMMENT_DETECTION.md "$PACKAGE_DIR/docs/" 2>/dev/null || true
        cp LICENSE "$PACKAGE_DIR/docs/" 2>/dev/null || true
        
        # Make executable
        chmod +x "$PACKAGE_DIR/HadesCrypt"
        
        # Create install script
        cat > "$PACKAGE_DIR/install.sh" << 'EOF'
#!/bin/bash
# HadesCrypt macOS Installer

echo "Installing HadesCrypt..."

# Copy to /usr/local/bin
sudo cp HadesCrypt /usr/local/bin/hadescrypt
sudo chmod +x /usr/local/bin/hadescrypt

echo "HadesCrypt installed successfully!"
echo "You can now run 'hadescrypt' from terminal."
EOF
        chmod +x "$PACKAGE_DIR/install.sh"
        
        # Create quick start guide
        cat > "$PACKAGE_DIR/QUICK_START.txt" << EOF
# HadesCrypt v${{ env.VERSION }} - Quick Start Guide

## Installation
1. Extract all files: tar -xzf HadesCrypt-v${{ env.VERSION }}-macOS-x64.tar.gz
2. Run install.sh for system-wide installation (optional)
3. Or run ./HadesCrypt directly

## Basic Usage
1. Launch ./HadesCrypt
2. Drag and drop your file into the application
3. Enter a strong password
4. Click "Encrypt" to encrypt or "Decrypt" to decrypt

## Features
- Multiple encryption modes (AES-256, ChaCha20, Post-Quantum, GnuPG)
- Password strength meter and generator
- Comments and keyfiles support
- Drag and drop interface
- Progress tracking

## Version: ${{ env.VERSION }}
Build Date: $(date +%Y-%m-%d)

Lock your secrets, rule your data. 🔱
EOF
        
        # Generate file hash
        HASH=$(shasum -a 256 "$PACKAGE_DIR/HadesCrypt" | cut -d ' ' -f1)
        echo "MACOS_HASH=$HASH" >> $GITHUB_ENV
        
        # Create tar.gz archive
        tar -czf "$PACKAGE_NAME.tar.gz" -C dist "$PACKAGE_NAME"
        
        echo "MACOS_PACKAGE=$PACKAGE_NAME.tar.gz" >> $GITHUB_ENV

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          HadesCrypt-v${{ env.VERSION }}-macOS-x64.tar.gz
          dist/macos/HadesCrypt
        if-no-files-found: error
        compression-level: 9

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Get version
      run: |
        VERSION=$(cat VERSION | tr -d '\n\r')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Move files to release directory
      run: |
        mkdir -p release
        find artifacts -name "*.zip" -exec cp {} release/ \;
        find artifacts -name "*.tar.gz" -exec cp {} release/ \;
        ls -la release/

    - name: Generate checksums
      run: |
        cd release
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.VERSION }}
        name: HadesCrypt v${{ env.VERSION }}
        make_latest: true
        files: |
          release/*
        body: |
          # HadesCrypt v${{ env.VERSION }} 🔱

          **Lock your secrets, rule your data.**

          ## 🚀 What's New in v${{ env.VERSION }}

          - Advanced file encryption with multiple algorithms
          - Password confirmation with animated feedback
          - Comment detection for encrypted files  
          - GnuPG/OpenPGP support
          - Post-quantum cryptography options
          - Enhanced keyfile management
          - Cross-platform compatibility

          ## 📦 Downloads

          ### Windows
          - **HadesCrypt-v${{ env.VERSION }}-Windows-x64.zip** - Complete package with installer
          - Includes: Executable, installer, documentation, quick start guide

          ### Linux  
          - **HadesCrypt-v${{ env.VERSION }}-Linux-x64.tar.gz** - Complete package with installer
          - Includes: Executable, install script, documentation

          ### macOS
          - **HadesCrypt-v${{ env.VERSION }}-macOS-x64.tar.gz** - Complete package with installer  
          - Includes: Executable, install script, documentation

          ## 🔒 Supported Encryption Modes

          - **AES-256-GCM**: Recommended for most users
          - **ChaCha20-Poly1305**: Fast and modern
          - **Paranoid Mode**: AES-256 + ChaCha20 cascade
          - **Post-Quantum**: Kyber-768, Dilithium-3, SPHINCS+
          - **GnuPG/OpenPGP**: Industry standard compatibility

          ## ✨ Key Features

          - 🎯 **Simple Interface**: Drag & drop encryption
          - 🔐 **Multiple Algorithms**: Choose your security level
          - 💪 **Password Tools**: Generator with strength meter
          - 📝 **Comments Support**: Add metadata to encrypted files
          - 🔑 **Keyfiles**: Multiple keyfiles with order enforcement
          - 📊 **Progress Tracking**: Real-time encryption progress
          - 🌍 **Cross-platform**: Windows, Linux, macOS

          ## 🛠️ Installation

          ### Windows
          1. Download and extract the ZIP file
          2. Run `install.bat` as Administrator (optional)
          3. Or run `HadesCrypt.exe` directly

          ### Linux
          1. Download and extract: `tar -xzf HadesCrypt-v${{ env.VERSION }}-Linux-x64.tar.gz`
          2. Run `./install.sh` (optional)
          3. Or run `./HadesCrypt` directly

          ### macOS  
          1. Download and extract: `tar -xzf HadesCrypt-v${{ env.VERSION }}-macOS-x64.tar.gz`
          2. Run `./install.sh` (optional)
          3. Or run `./HadesCrypt` directly

          ## 🔍 File Verification

          All files include SHA-256 checksums for verification. See `checksums.txt` for hashes.

          ## 📋 System Requirements

          - **Windows**: Windows 10/11 (x64)
          - **Linux**: Ubuntu 18.04+ or equivalent (x64)
          - **macOS**: macOS 10.15+ (x64)
          - **Memory**: 100MB RAM minimum
          - **Storage**: 50MB free space

          ## 🆘 Support

          - 📖 **Documentation**: Check the docs folder in each package
          - 🐛 **Issues**: Report bugs on GitHub Issues
          - 💬 **Discussions**: Join GitHub Discussions for help

          ---

          **Built with ❤️ for privacy and security**
