name: Release Windows

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. 2.1.0) override; if empty derived from tag'
        required: false

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-2022
    env:
      GO_VERSION: '1.22'
      APP_NAME: HadesCrypt
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Derive Version
        id: version
        shell: pwsh
        run: |
          if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch' -and '${{ github.event.inputs.version }}' -ne '') {
            $V='${{ github.event.inputs.version }}'
          } else {
            $V=$env:GITHUB_REF_NAME -replace '^v',''
          }
          Set-Content VERSION $V
          "version=$V" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          Write-Host "Detected version: $V"

      - name: Verify Version File
        shell: pwsh
        run: Get-Content VERSION | Write-Host

      - name: Build Windows x64
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist\windows | Out-Null
          go mod download
          $ld = "-s -w -H windowsgui -X main.version=${{ steps.version.outputs.version }}"
          $out = "dist\windows\${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}-Windows-x64.exe"
          go build -ldflags $ld -o $out .
          if (!(Test-Path $out)) { Write-Error 'Build failed'; exit 1 }

      - name: Generate SHA256
        shell: pwsh
        run: |
          Get-ChildItem dist\windows -Filter *.exe | ForEach-Object {
            $hash=(Get-FileHash -Algorithm SHA256 $_.FullName).Hash
            "$($_.Name)  $hash" | Out-File ($_.FullName + '.sha256') -Encoding ascii
          }

      - name: Prepare Portable Package
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist\package | Out-Null
          if (Test-Path README.md) { Copy-Item README.md dist\package\ }
          if (Test-Path CHANGELOG.md) { Copy-Item CHANGELOG.md dist\package\ }
          Copy-Item dist\windows\*.exe dist\package\
          'Files:' | Out-File dist\package\FILES.txt -Encoding ascii
          (Get-ChildItem dist\package | Select-Object -ExpandProperty Name) | Out-File dist\package\FILES.txt -Append -Encoding ascii
          Compress-Archive -Path dist\package\* -DestinationPath dist\${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}-Windows-portable.zip -Force

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ steps.version.outputs.version }}
          path: |
            dist/windows/*.exe*
            dist/*.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: HadesCrypt v${{ steps.version.outputs.version }} (Windows)
          draft: false
          prerelease: false
          files: |
            dist/windows/*.exe
            dist/windows/*.sha256*
            dist/*-Windows-portable.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional manual-only release when dispatch used without tag
  release-manual:
    if: github.event_name == 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/')
    needs: build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build-${{ needs.build-windows.outputs.version }}
          path: dist
      - name: Create Release (manual dispatch)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-windows.outputs.version }}
          name: HadesCrypt v${{ needs.build-windows.outputs.version }} (Windows)
          draft: false
          prerelease: false
          files: |
            dist/**/*.exe
            dist/**/*.sha256*
            dist/*-Windows-portable.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
