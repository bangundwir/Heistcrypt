name: Release Windows

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. 2.1.0) override; if empty derived from tag'
        required: false

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      GO_VERSION: '1.22'
      APP_NAME: HadesCrypt
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Derive Version
        id: version
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            V="${{ github.event.inputs.version }}"
          else
            # Strip leading v if tag like v2.0.3
            RAW_TAG="${GITHUB_REF_NAME}"
            V="${RAW_TAG#v}"
          fi
          echo "$V" > VERSION
          echo "version=$V" >> $GITHUB_OUTPUT
          echo "Detected version: $V"

      - name: Verify Version File
        run: type VERSION

      - name: Build Windows x64
        shell: bash
        run: |
          mkdir -p dist/windows
          go mod download
          go build -ldflags "-s -w -H windowsgui -X main.version=${{ steps.version.outputs.version }}" -o dist/windows/${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}-Windows-x64.exe .

      - name: Generate SHA256
        shell: bash
        run: |
          cd dist/windows
          for f in *.exe; do
            sha256sum "$f" > "$f.sha256" || shasum -a 256 "$f" > "$f.sha256" || certutil -hashfile "$f" SHA256 > "$f.sha256.txt" 2>nul || true
          done

      - name: Prepare Portable Package
        shell: bash
        run: |
          mkdir -p dist/package
          cp README.md CHANGELOG.md || true
          cp dist/windows/*.exe dist/package/
          echo "Files:" > dist/package/FILES.txt
          ls -1 dist/package >> dist/package/FILES.txt
          ( cd dist/package && zip -r ../${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}-Windows-portable.zip . )

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ steps.version.outputs.version }}
          path: |
            dist/windows/*.exe*
            dist/*.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: HadesCrypt v${{ steps.version.outputs.version }} (Windows)
          draft: false
          prerelease: false
          files: |
            dist/windows/*.exe
            dist/windows/*.sha256*
            dist/*-Windows-portable.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional manual-only release when dispatch used without tag
  release-manual:
    if: github.event_name == 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/')
    needs: build-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build-${{ needs.build-windows.outputs.version || 'manual' }}
          path: dist
      - name: Create Release (manual dispatch)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: HadesCrypt v${{ github.event.inputs.version }} (Windows)
          draft: false
          prerelease: false
          files: |
            dist/**/*.exe
            dist/**/*.sha256*
            dist/*-Windows-portable.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
